EXERCISE 1.8: TWO LINE DOCKERFILE
By default our devopsdockeruh/simple-web-service:alpine doesn't have a CMD. It instead uses ENTRYPOINT to declare which application is run.

We'll talk more about ENTRYPOINT in the next section, but you already know that the last argument in docker run can be used to give a command or an argument.

As you might've noticed it doesn't start the web service even though the name is "simple-web-service". A suitable argument is needed to start the server!

Try docker run devopsdockeruh/simple-web-service:alpine hello. The application reads the argument "hello" but will inform that hello isn't accepted.

In this exercise create a Dockerfile and use FROM and CMD to create a brand new image that automatically runs server.

The Docker documentation CMD says a bit indirectly that if a image has ENTRYPOINT defined, CMD is used to define it the default arguments.

Tag the new image as "web-server"

Return the Dockerfile and the command you used to run the container.

Running the built "web-server" image should look like this:

$ docker run web-server
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
- using env:   export GIN_MODE=release
- using code:  gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /*path                    --> server.Start.func1 (3 handlers)
[GIN-debug] Listening and serving HTTP on :8080


We don't have any method of accessing the web service yet. As such confirming that the console output is the same will suffice.

The exercise title may be a useful hint here.

-------------------
-------------------

C:\Users\Violeta\Documents\dev\docker-mooc.fi\part1\1.8>docker build . -t web-server
[+] Building 0.2s (5/5) FINISHED
 => [internal] load build definition from Dockerfile                                                           0.0s
 => => transferring dockerfile: 96B                                                                            0.0s
 => [internal] load .dockerignore                                                                              0.0s
 => => transferring context: 2B                                                                                0.0s
 => [internal] load metadata for docker.io/devopsdockeruh/simple-web-service:alpine                            0.0s
 => [1/1] FROM docker.io/devopsdockeruh/simple-web-service:alpine                                              0.1s
 => exporting to image                                                                                         0.0s
 => => exporting layers                                                                                        0.0s
 => => writing image sha256:978fbf315695ef5a3ec2e77ee411c4dcd9aa9b867fbc7ea3d26962545fda0585                   0.0s
 => => naming to docker.io/library/web-server                                                                  0.0s

Use 'docker scan' to run Snyk tests against images to find vulnerabilities and learn how to fix them

C:\Users\Violeta\Documents\dev\docker-mooc.fi\part1\1.8>docker images
REPOSITORY                          TAG       IMAGE ID       CREATED       SIZE
curler                              latest    93750d1b0a8d   4 hours ago   135MB
hello-docker                        latest    a43f123aa29a   4 days ago    5.62MB
ubuntu                              latest    01f29b872827   4 weeks ago   77.8MB
devopsdockeruh/simple-web-service   ubuntu    4e3362e907d5   2 years ago   83MB
devopsdockeruh/simple-web-service   alpine    fd312adc88e0   2 years ago   15.7MB
web-server                          latest    978fbf315695   2 years ago   15.7MB
devopsdockeruh/pull_exercise        latest    d9854bc0e13a   4 years ago   75.3MB

C:\Users\Violeta\Documents\dev\docker-mooc.fi\part1\1.8>docker run web-server
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:   export GIN_MODE=release
 - using code:  gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /*path                    --> server.Start.func1 (3 handlers)
[GIN-debug] Listening and serving HTTP on :8080

